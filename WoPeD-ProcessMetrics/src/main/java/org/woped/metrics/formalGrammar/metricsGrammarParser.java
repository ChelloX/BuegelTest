/**
 * This Class is generated by ANTLR based on the "metricsGrammar.g" Grammar-File
 * It is the Parser for the Grammar
 * @author <a href="mailto:tobias.lorentz@landau.dlrg-jugend.de">Tobias Lorentz</a>
 */

package org.woped.metrics.formalGrammar;
import java.util.ArrayList;
import java.util.HashSet;

import org.antlr.runtime.BitSet;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.woped.metrics.exceptions.AlgorithmIDTranslateException;
import org.woped.metrics.exceptions.AntlrException;
import org.woped.metrics.exceptions.CalculateFormulaException;
import org.woped.metrics.exceptions.FormulaVariableNotFoundException;
import org.woped.metrics.exceptions.NestedCalculateFormulaException;
import org.woped.metrics.metricsCalculation.MetricsCalculator;
import org.woped.metrics.metricsCalculation.MetricsUIRequestHandler;

public class metricsGrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "IDENT", "DOUBLE", "MULTILINE_COMMENT", "STRING_LITERAL", "CHAR_LITERAL", "LETTER", "DIGIT", "WS", "COMMENT", "'('", "')'", "'$'", "'PI'", "'E'", "'toRadians('", "'toDegrees('", "'tan('", "'sin('", "'rint('", "'random()'", "'min('", "','", "'max('", "'IEEEremainder('", "'floor('", "'exp('", "'cos('", "'ceil('", "'atan2('", "'atan('", "'asin('", "'acos('", "'abs('", "'log2('", "'pow('", "'sqrt('", "'+'", "'-'", "'*'", "'/'", "'mod'"
    };
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int LETTER=9;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int EOF=-1;
    public static final int T__19=19;
    public static final int MULTILINE_COMMENT=6;
    public static final int T__16=16;
    public static final int STRING_LITERAL=7;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int DOUBLE=5;
    public static final int IDENT=4;
    public static final int DIGIT=10;
    public static final int COMMENT=12;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__44=44;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__33=33;
    public static final int WS=11;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int CHAR_LITERAL=8;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    
    private MetricsCalculator 	metricsCalculator;
	private HashSet<String>		stack;
	private boolean				doNotDisplay;
	private boolean				syntaxCheck;

    // delegates
    // delegators


	public metricsGrammarParser(TokenStream input,
			MetricsCalculator metricsCalculator, HashSet<String> stack, boolean doNotDisplay, boolean syntaxCheck) {
		this(input, new RecognizerSharedState(), metricsCalculator, stack, doNotDisplay, syntaxCheck);
	}

	public metricsGrammarParser(TokenStream input, RecognizerSharedState state,
			MetricsCalculator metricsCalculator, HashSet<String> stack, boolean doNotDisplay, boolean syntaxCheck) {
		super(input, state);
		this.metricsCalculator 	= metricsCalculator;
		this.stack				= stack;
		this.doNotDisplay		= doNotDisplay;
		this.syntaxCheck		= syntaxCheck;
		}
        

    public String[] getTokenNames() { return metricsGrammarParser.tokenNames; }
    public String getGrammarFileName() { return "/home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g"; }



    // $ANTLR start "evaluator"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:13:1: evaluator returns [double result] : expression EOF ;
    public final double evaluator() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression1 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:14:2: ( expression EOF )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:14:4: expression EOF
            {
            pushFollow(FOLLOW_expression_in_evaluator42);
            expression1=expression();

            state._fsp--;

            match(input,EOF,FOLLOW_EOF_in_evaluator44); 
             result = expression1; 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        
        //Check if the Error-List is not empty and Syntax-Check is activated
        //(This is the fact if you have error which could be recovered)
        if((!ErrorList.getInstance().isEmpty()) && syntaxCheck){
             ArrayList<CalculateFormulaException> errorList = 
             (ArrayList<CalculateFormulaException>)ErrorList.getInstance().getErrorList().clone();
     
            ErrorList.getInstance().clear();
            throw new NestedCalculateFormulaException(errorList); 
           }
        
        
        return result;
    }
    // $ANTLR end "evaluator"


    // $ANTLR start "term"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:18:1: term returns [double result] : ( IDENT | '(' expression ')' | DOUBLE | function );
    /**
     * @return
     * @throws RecognitionException
     * @throws CalculateFormulaException
     */
    public final double term() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        Token DOUBLE3=null;
        Token IdentToken = null;
        double expression2 = 0.0;

        double function4 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:19:2: ( IDENT | '(' expression ')' | DOUBLE | function )
            int alt1=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt1=1;
                }
                break;
            case 13:
                {
                alt1=2;
                }
                break;
            case DOUBLE:
                {
                alt1=3;
                }
                break;
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
                {
                alt1=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:19:4: IDENT
                    {
                    	/**
                    	 * This Section is not autogenerated by ANTLR
                    	 * It passes the variable / identifier back to the metricsCalculator to find a new Formula for that variable
                    	 * @author Tobias Lorentz
                    	 */
                    	IdentToken = (Token) match(input, IDENT, FOLLOW_IDENT_in_term62);
                        
                        
                        //If the Syntax is checked, there is no recursion needed
                        //Due to the fact that there is no data available, the Variable can't be calculated
                        if (syntaxCheck){
                         if(MetricsCalculator.isVariableValid(IdentToken.getText())== false){
                        	 //Check if there is a formula describtion with that name
                        	 //algorithmNameToID return the token-name if the id was not found
                          if(MetricsUIRequestHandler.algorithmNameToID(IdentToken.getText()).equals(IdentToken.getText())){
                        	  ErrorList.getInstance().
                              addException(new FormulaVariableNotFoundException(IdentToken.getText(), IdentToken.getCharPositionInLine()));                        
                          }else{
                        	  ErrorList.getInstance().
                              addException(new AlgorithmIDTranslateException(IdentToken.getText(), MetricsUIRequestHandler.algorithmNameToID(IdentToken.getText())));  
                          }
                        	
                         }
                         result = 1;
                        }else{
                         result = metricsCalculator.calculateVariable(IdentToken
                     .getText(), stack, this.doNotDisplay);
                        }
                    	

                    }
                    break;
                case 2 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:20:4: '(' expression ')'
                    {
                    match(input,13,FOLLOW_13_in_term69); 
                    pushFollow(FOLLOW_expression_in_term71);
                    expression2=expression();

                    state._fsp--;

                    match(input,14,FOLLOW_14_in_term73); 
                    result = expression2;

                    }
                    break;
                case 3 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:21:4: DOUBLE
                    {
                    DOUBLE3=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_term80); 
                    result = Double.parseDouble((DOUBLE3!=null?DOUBLE3.getText():null));

                    }
                    break;
                case 4 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:22:4: function
                    {
                    pushFollow(FOLLOW_function_in_term87);
                    function4=function();

                    state._fsp--;

                    result = function4;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "term"


    // $ANTLR start "function"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:24:1: function returns [double result] : ( javaMathFunctions | ownFunctions );
    public final double function() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double javaMathFunctions5 = 0.0;

        double ownFunctions6 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:25:2: ( javaMathFunctions | ownFunctions )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( ((LA2_0>=16 && LA2_0<=24)||(LA2_0>=26 && LA2_0<=39)) ) {
                alt2=1;
            }
            else if ( (LA2_0==15) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:25:4: javaMathFunctions
                    {
                    pushFollow(FOLLOW_javaMathFunctions_in_function103);
                    javaMathFunctions5=javaMathFunctions();

                    state._fsp--;

                    result = javaMathFunctions5;

                    }
                    break;
                case 2 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:26:4: ownFunctions
                    {
                    pushFollow(FOLLOW_ownFunctions_in_function111);
                    ownFunctions6=ownFunctions();

                    state._fsp--;

                    result = ownFunctions6;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "function"


    // $ANTLR start "ownFunctions"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:28:1: ownFunctions returns [double result] : doNotDisplay ;
    public final double ownFunctions() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double doNotDisplay7 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:29:2: ( doNotDisplay )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:29:4: doNotDisplay
            {
            pushFollow(FOLLOW_doNotDisplay_in_ownFunctions127);
            doNotDisplay7=doNotDisplay();

            state._fsp--;

            result = doNotDisplay7;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "ownFunctions"


    // $ANTLR start "doNotDisplay"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:32:1: doNotDisplay returns [double result] : '$' IDENT ;
    public final double doNotDisplay() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;
        Token IdentToken = null;

        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:33:2: ( '$' IDENT )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:33:4: '$' IDENT
            {
            match(input,15,FOLLOW_15_in_doNotDisplay144); 
            
            /**
             * The next two Lines are not autogenerated by ATNLR
             * It passes the variable / identifier back to the metricsCalculator to find a new Formula for that variable
             * @author Tobias Lorentz
             */
            IdentToken = (Token)  match(input,IDENT,FOLLOW_IDENT_in_doNotDisplay146);
            
            //If the Syntax is checked, there is no recursion needed
	         //Due to the fact that there is no data available, the Variable can't be calculated
	            if (syntaxCheck){
	          if(MetricsCalculator.isVariableValid(IdentToken.getText())== false){
	           ErrorList.getInstance().
	           addException(new FormulaVariableNotFoundException(IdentToken.getText(), IdentToken.getCharPositionInLine()));
	          }
	          result = 1;
	         }else{
	          result = metricsCalculator.calculateVariable(IdentToken.getText(), stack,true);
	         }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "doNotDisplay"


    // $ANTLR start "javaMathFunctions"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:36:1: javaMathFunctions returns [double result] : ( sqrt | pow | log2 | abs | acos | asin | atan | atan2 | ceil | cos | exp | floor | ieeeremainder | max | min | random | rint | sin | tan | toDegrees | toRadians | e | pi );
    public final double javaMathFunctions() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double sqrt8 = 0.0;

        double pow9 = 0.0;

        double log210 = 0.0;

        double abs11 = 0.0;

        double acos12 = 0.0;

        double asin13 = 0.0;

        double atan14 = 0.0;

        double atan215 = 0.0;

        double ceil16 = 0.0;

        double cos17 = 0.0;

        double exp18 = 0.0;

        double floor19 = 0.0;

        double ieeeremainder20 = 0.0;

        double max21 = 0.0;

        double min22 = 0.0;

        double random23 = 0.0;

        double rint24 = 0.0;

        double sin25 = 0.0;

        double tan26 = 0.0;

        double toDegrees27 = 0.0;

        double toRadians28 = 0.0;

        double e29 = 0.0;

        double pi30 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:37:2: ( sqrt | pow | log2 | abs | acos | asin | atan | atan2 | ceil | cos | exp | floor | ieeeremainder | max | min | random | rint | sin | tan | toDegrees | toRadians | e | pi )
            int alt3=23;
            switch ( input.LA(1) ) {
            case 39:
                {
                alt3=1;
                }
                break;
            case 38:
                {
                alt3=2;
                }
                break;
            case 37:
                {
                alt3=3;
                }
                break;
            case 36:
                {
                alt3=4;
                }
                break;
            case 35:
                {
                alt3=5;
                }
                break;
            case 34:
                {
                alt3=6;
                }
                break;
            case 33:
                {
                alt3=7;
                }
                break;
            case 32:
                {
                alt3=8;
                }
                break;
            case 31:
                {
                alt3=9;
                }
                break;
            case 30:
                {
                alt3=10;
                }
                break;
            case 29:
                {
                alt3=11;
                }
                break;
            case 28:
                {
                alt3=12;
                }
                break;
            case 27:
                {
                alt3=13;
                }
                break;
            case 26:
                {
                alt3=14;
                }
                break;
            case 24:
                {
                alt3=15;
                }
                break;
            case 23:
                {
                alt3=16;
                }
                break;
            case 22:
                {
                alt3=17;
                }
                break;
            case 21:
                {
                alt3=18;
                }
                break;
            case 20:
                {
                alt3=19;
                }
                break;
            case 19:
                {
                alt3=20;
                }
                break;
            case 18:
                {
                alt3=21;
                }
                break;
            case 17:
                {
                alt3=22;
                }
                break;
            case 16:
                {
                alt3=23;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:37:4: sqrt
                    {
                    pushFollow(FOLLOW_sqrt_in_javaMathFunctions163);
                    sqrt8=sqrt();

                    state._fsp--;

                    result = sqrt8;

                    }
                    break;
                case 2 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:38:4: pow
                    {
                    pushFollow(FOLLOW_pow_in_javaMathFunctions170);
                    pow9=pow();

                    state._fsp--;

                    result = pow9;

                    }
                    break;
                case 3 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:39:4: log2
                    {
                    pushFollow(FOLLOW_log2_in_javaMathFunctions178);
                    log210=log2();

                    state._fsp--;

                    result = log210;

                    }
                    break;
                case 4 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:40:4: abs
                    {
                    pushFollow(FOLLOW_abs_in_javaMathFunctions185);
                    abs11=abs();

                    state._fsp--;

                    result = abs11; 

                    }
                    break;
                case 5 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:41:4: acos
                    {
                    pushFollow(FOLLOW_acos_in_javaMathFunctions192);
                    acos12=acos();

                    state._fsp--;

                    result = acos12;

                    }
                    break;
                case 6 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:42:4: asin
                    {
                    pushFollow(FOLLOW_asin_in_javaMathFunctions199);
                    asin13=asin();

                    state._fsp--;

                    result = asin13;

                    }
                    break;
                case 7 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:43:4: atan
                    {
                    pushFollow(FOLLOW_atan_in_javaMathFunctions206);
                    atan14=atan();

                    state._fsp--;

                    result = atan14;

                    }
                    break;
                case 8 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:44:4: atan2
                    {
                    pushFollow(FOLLOW_atan2_in_javaMathFunctions213);
                    atan215=atan2();

                    state._fsp--;

                    result = atan215;

                    }
                    break;
                case 9 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:45:4: ceil
                    {
                    pushFollow(FOLLOW_ceil_in_javaMathFunctions220);
                    ceil16=ceil();

                    state._fsp--;

                    result = ceil16;

                    }
                    break;
                case 10 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:46:4: cos
                    {
                    pushFollow(FOLLOW_cos_in_javaMathFunctions227);
                    cos17=cos();

                    state._fsp--;

                    result = cos17;

                    }
                    break;
                case 11 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:47:4: exp
                    {
                    pushFollow(FOLLOW_exp_in_javaMathFunctions234);
                    exp18=exp();

                    state._fsp--;

                    result = exp18;

                    }
                    break;
                case 12 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:48:4: floor
                    {
                    pushFollow(FOLLOW_floor_in_javaMathFunctions241);
                    floor19=floor();

                    state._fsp--;

                    result = floor19;

                    }
                    break;
                case 13 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:49:4: ieeeremainder
                    {
                    pushFollow(FOLLOW_ieeeremainder_in_javaMathFunctions248);
                    ieeeremainder20=ieeeremainder();

                    state._fsp--;

                    result = ieeeremainder20;

                    }
                    break;
                case 14 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:50:4: max
                    {
                    pushFollow(FOLLOW_max_in_javaMathFunctions255);
                    max21=max();

                    state._fsp--;

                    result = max21;

                    }
                    break;
                case 15 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:51:4: min
                    {
                    pushFollow(FOLLOW_min_in_javaMathFunctions262);
                    min22=min();

                    state._fsp--;

                    result = min22;

                    }
                    break;
                case 16 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:52:4: random
                    {
                    pushFollow(FOLLOW_random_in_javaMathFunctions269);
                    random23=random();

                    state._fsp--;

                    result = random23;

                    }
                    break;
                case 17 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:53:4: rint
                    {
                    pushFollow(FOLLOW_rint_in_javaMathFunctions276);
                    rint24=rint();

                    state._fsp--;

                    result = rint24;

                    }
                    break;
                case 18 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:54:4: sin
                    {
                    pushFollow(FOLLOW_sin_in_javaMathFunctions283);
                    sin25=sin();

                    state._fsp--;

                    result = sin25;

                    }
                    break;
                case 19 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:55:4: tan
                    {
                    pushFollow(FOLLOW_tan_in_javaMathFunctions290);
                    tan26=tan();

                    state._fsp--;

                    result = tan26;

                    }
                    break;
                case 20 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:56:4: toDegrees
                    {
                    pushFollow(FOLLOW_toDegrees_in_javaMathFunctions297);
                    toDegrees27=toDegrees();

                    state._fsp--;

                    result = toDegrees27;

                    }
                    break;
                case 21 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:57:4: toRadians
                    {
                    pushFollow(FOLLOW_toRadians_in_javaMathFunctions304);
                    toRadians28=toRadians();

                    state._fsp--;

                    result = toRadians28;

                    }
                    break;
                case 22 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:58:4: e
                    {
                    pushFollow(FOLLOW_e_in_javaMathFunctions311);
                    e29=e();

                    state._fsp--;

                    result = e29;

                    }
                    break;
                case 23 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:59:4: pi
                    {
                    pushFollow(FOLLOW_pi_in_javaMathFunctions318);
                    pi30=pi();

                    state._fsp--;

                    result = pi30;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "javaMathFunctions"


    // $ANTLR start "pi"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:62:1: pi returns [double result] : 'PI' ;
    public final double pi() throws RecognitionException {
        double result = 0.0;

        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:63:2: ( 'PI' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:63:4: 'PI'
            {
            match(input,16,FOLLOW_16_in_pi336); 
            result = Math.PI;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "pi"


    // $ANTLR start "e"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:66:1: e returns [double result] : 'E' ;
    public final double e() throws RecognitionException {
        double result = 0.0;

        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:67:2: ( 'E' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:67:4: 'E'
            {
            match(input,17,FOLLOW_17_in_e354); 
            result = Math.E;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "e"


    // $ANTLR start "toRadians"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:70:1: toRadians returns [double result] : 'toRadians(' expression ')' ;
    public final double toRadians() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression31 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:71:2: ( 'toRadians(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:71:4: 'toRadians(' expression ')'
            {
            match(input,18,FOLLOW_18_in_toRadians371); 
            pushFollow(FOLLOW_expression_in_toRadians373);
            expression31=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_toRadians375); 
            result = Math.toRadians(expression31);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "toRadians"


    // $ANTLR start "toDegrees"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:74:1: toDegrees returns [double result] : 'toDegrees(' expression ')' ;
    public final double toDegrees() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression32 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:75:2: ( 'toDegrees(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:75:4: 'toDegrees(' expression ')'
            {
            match(input,19,FOLLOW_19_in_toDegrees392); 
            pushFollow(FOLLOW_expression_in_toDegrees394);
            expression32=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_toDegrees396); 
            result = Math.toDegrees(expression32);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "toDegrees"


    // $ANTLR start "tan"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:78:1: tan returns [double result] : 'tan(' expression ')' ;
    public final double tan() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression33 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:79:2: ( 'tan(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:79:4: 'tan(' expression ')'
            {
            match(input,20,FOLLOW_20_in_tan413); 
            pushFollow(FOLLOW_expression_in_tan415);
            expression33=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_tan417); 
            result = Math.tan(expression33);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "tan"


    // $ANTLR start "sin"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:82:1: sin returns [double result] : 'sin(' expression ')' ;
    public final double sin() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression34 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:83:2: ( 'sin(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:83:4: 'sin(' expression ')'
            {
            match(input,21,FOLLOW_21_in_sin434); 
            pushFollow(FOLLOW_expression_in_sin436);
            expression34=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_sin438); 
            result = Math.sin(expression34);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "sin"


    // $ANTLR start "rint"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:86:1: rint returns [double result] : 'rint(' expression ')' ;
    public final double rint() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression35 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:87:2: ( 'rint(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:87:4: 'rint(' expression ')'
            {
            match(input,22,FOLLOW_22_in_rint455); 
            pushFollow(FOLLOW_expression_in_rint457);
            expression35=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_rint459); 
            result = Math.rint(expression35);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "rint"


    // $ANTLR start "random"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:90:1: random returns [double result] : 'random()' ;
    public final double random() throws RecognitionException {
        double result = 0.0;

        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:91:2: ( 'random()' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:91:4: 'random()'
            {
            match(input,23,FOLLOW_23_in_random477); 
            result = Math.random();

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "random"


    // $ANTLR start "min"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:94:1: min returns [double result] : 'min(' e1= expression ',' e2= expression ')' ;
    public final double min() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double e1 = 0.0;

        double e2 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:95:2: ( 'min(' e1= expression ',' e2= expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:95:4: 'min(' e1= expression ',' e2= expression ')'
            {
            match(input,24,FOLLOW_24_in_min495); 
            pushFollow(FOLLOW_expression_in_min499);
            e1=expression();

            state._fsp--;

            match(input,25,FOLLOW_25_in_min501); 
            pushFollow(FOLLOW_expression_in_min505);
            e2=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_min507); 
            result = Math.min(e1 , e2);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "min"


    // $ANTLR start "max"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:98:1: max returns [double result] : 'max(' e1= expression ',' e2= expression ')' ;
    public final double max() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double e1 = 0.0;

        double e2 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:99:2: ( 'max(' e1= expression ',' e2= expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:99:4: 'max(' e1= expression ',' e2= expression ')'
            {
            match(input,26,FOLLOW_26_in_max524); 
            pushFollow(FOLLOW_expression_in_max528);
            e1=expression();

            state._fsp--;

            match(input,25,FOLLOW_25_in_max530); 
            pushFollow(FOLLOW_expression_in_max534);
            e2=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_max536); 
            result = Math.max(e1 , e2);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "max"


    // $ANTLR start "ieeeremainder"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:102:1: ieeeremainder returns [double result] : 'IEEEremainder(' f1= expression ',' f2= expression ')' ;
    public final double ieeeremainder() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double f1 = 0.0;

        double f2 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:103:2: ( 'IEEEremainder(' f1= expression ',' f2= expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:103:4: 'IEEEremainder(' f1= expression ',' f2= expression ')'
            {
            match(input,27,FOLLOW_27_in_ieeeremainder553); 
            pushFollow(FOLLOW_expression_in_ieeeremainder557);
            f1=expression();

            state._fsp--;

            match(input,25,FOLLOW_25_in_ieeeremainder559); 
            pushFollow(FOLLOW_expression_in_ieeeremainder563);
            f2=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_ieeeremainder565); 
            result = Math.IEEEremainder(f1,f2);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "ieeeremainder"


    // $ANTLR start "floor"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:106:1: floor returns [double result] : 'floor(' expression ')' ;
    public final double floor() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression36 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:107:2: ( 'floor(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:107:4: 'floor(' expression ')'
            {
            match(input,28,FOLLOW_28_in_floor583); 
            pushFollow(FOLLOW_expression_in_floor585);
            expression36=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_floor587); 
            result = Math.floor(expression36);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "floor"


    // $ANTLR start "exp"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:110:1: exp returns [double result] : 'exp(' expression ')' ;
    public final double exp() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression37 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:111:2: ( 'exp(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:111:4: 'exp(' expression ')'
            {
            match(input,29,FOLLOW_29_in_exp604); 
            pushFollow(FOLLOW_expression_in_exp606);
            expression37=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_exp608); 
            result = Math.exp(expression37);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "exp"


    // $ANTLR start "cos"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:114:1: cos returns [double result] : 'cos(' expression ')' ;
    public final double cos() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression38 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:115:2: ( 'cos(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:115:4: 'cos(' expression ')'
            {
            match(input,30,FOLLOW_30_in_cos627); 
            pushFollow(FOLLOW_expression_in_cos629);
            expression38=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_cos631); 
            result = Math.cos(expression38);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "cos"


    // $ANTLR start "ceil"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:118:1: ceil returns [double result] : 'ceil(' expression ')' ;
    public final double ceil() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression39 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:119:2: ( 'ceil(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:119:4: 'ceil(' expression ')'
            {
            match(input,31,FOLLOW_31_in_ceil649); 
            pushFollow(FOLLOW_expression_in_ceil651);
            expression39=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_ceil653); 
            result = Math.ceil(expression39);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "ceil"


    // $ANTLR start "atan2"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:123:1: atan2 returns [double result] : 'atan2(' e1= expression ',' e2= expression ')' ;
    public final double atan2() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double e1 = 0.0;

        double e2 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:124:2: ( 'atan2(' e1= expression ',' e2= expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:124:4: 'atan2(' e1= expression ',' e2= expression ')'
            {
            match(input,32,FOLLOW_32_in_atan2671); 
            pushFollow(FOLLOW_expression_in_atan2675);
            e1=expression();

            state._fsp--;

            match(input,25,FOLLOW_25_in_atan2677); 
            pushFollow(FOLLOW_expression_in_atan2681);
            e2=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_atan2683); 
            result = Math.atan2(e1,e2);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "atan2"


    // $ANTLR start "atan"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:128:1: atan returns [double result] : 'atan(' expression ')' ;
    public final double atan() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression40 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:129:2: ( 'atan(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:129:4: 'atan(' expression ')'
            {
            match(input,33,FOLLOW_33_in_atan701); 
            pushFollow(FOLLOW_expression_in_atan703);
            expression40=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_atan705); 
            result = Math.atan(expression40);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "atan"


    // $ANTLR start "asin"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:132:1: asin returns [double result] : 'asin(' expression ')' ;
    public final double asin() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression41 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:133:2: ( 'asin(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:133:4: 'asin(' expression ')'
            {
            match(input,34,FOLLOW_34_in_asin724); 
            pushFollow(FOLLOW_expression_in_asin726);
            expression41=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_asin728); 
            result = Math.asin(expression41);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "asin"


    // $ANTLR start "acos"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:136:1: acos returns [double result] : 'acos(' expression ')' ;
    public final double acos() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression42 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:137:2: ( 'acos(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:137:4: 'acos(' expression ')'
            {
            match(input,35,FOLLOW_35_in_acos745); 
            pushFollow(FOLLOW_expression_in_acos747);
            expression42=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_acos749); 
            result = Math.acos(expression42);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "acos"


    // $ANTLR start "abs"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:140:1: abs returns [double result] : 'abs(' expression ')' ;
    public final double abs() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression43 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:141:2: ( 'abs(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:141:4: 'abs(' expression ')'
            {
            match(input,36,FOLLOW_36_in_abs766); 
            pushFollow(FOLLOW_expression_in_abs768);
            expression43=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_abs770); 
            result = Math.abs(expression43);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "abs"


    // $ANTLR start "log2"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:144:1: log2 returns [double result] : 'log2(' expression ')' ;
    public final double log2() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression44 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:145:2: ( 'log2(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:145:4: 'log2(' expression ')'
            {
            match(input,37,FOLLOW_37_in_log2787); 
            pushFollow(FOLLOW_expression_in_log2789);
            expression44=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_log2791); 
            result = Math.log(expression44) / Math.log(2);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "log2"


    // $ANTLR start "pow"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:147:1: pow returns [double result] : 'pow(' expression ',' DOUBLE ')' ;
    public final double pow() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        Token DOUBLE46=null;
        double expression45 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:148:2: ( 'pow(' expression ',' DOUBLE ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:148:4: 'pow(' expression ',' DOUBLE ')'
            {
            match(input,38,FOLLOW_38_in_pow806); 
            pushFollow(FOLLOW_expression_in_pow808);
            expression45=expression();

            state._fsp--;

            match(input,25,FOLLOW_25_in_pow810); 
            DOUBLE46=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_pow812); 
            match(input,14,FOLLOW_14_in_pow815); 
            result = Math.pow(expression45,Double.parseDouble((DOUBLE46!=null?DOUBLE46.getText():null)));

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "pow"


    // $ANTLR start "sqrt"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:150:1: sqrt returns [double result] : 'sqrt(' expression ')' ;
    public final double sqrt() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double expression47 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:151:2: ( 'sqrt(' expression ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:151:4: 'sqrt(' expression ')'
            {
            match(input,39,FOLLOW_39_in_sqrt831); 
            pushFollow(FOLLOW_expression_in_sqrt833);
            expression47=expression();

            state._fsp--;

            match(input,14,FOLLOW_14_in_sqrt835); 
            result = Math.sqrt(expression47);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "sqrt"


    // $ANTLR start "unary"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:153:1: unary returns [double result] : ( '+' | '-' )* term ;
    public final double unary() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double term48 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:154:2: ( ( '+' | '-' )* term )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:154:4: ( '+' | '-' )* term
            {
             boolean positive = true; 
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:155:3: ( '+' | '-' )*
            loop4:
            do {
                int alt4=3;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==40) ) {
                    alt4=1;
                }
                else if ( (LA4_0==41) ) {
                    alt4=2;
                }


                switch (alt4) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:155:4: '+'
            	    {
            	    match(input,40,FOLLOW_40_in_unary856); 

            	    }
            	    break;
            	case 2 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:155:10: '-'
            	    {
            	    match(input,41,FOLLOW_41_in_unary860); 
            	     positive = !positive; 

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            pushFollow(FOLLOW_term_in_unary866);
            term48=term();

            state._fsp--;


            			result = term48;
            			if (!positive)
            				result = -result;
            		

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "unary"


    // $ANTLR start "mult"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:163:1: mult returns [double result] : op1= unary ( '*' op2= unary | '/' op2= unary | 'mod' op2= unary )* ;
    public final double mult() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double op1 = 0.0;

        double op2 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:164:2: (op1= unary ( '*' op2= unary | '/' op2= unary | 'mod' op2= unary )* )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:164:4: op1= unary ( '*' op2= unary | '/' op2= unary | 'mod' op2= unary )*
            {
            pushFollow(FOLLOW_unary_in_mult887);
            op1=unary();

            state._fsp--;

             result = op1; 
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:165:3: ( '*' op2= unary | '/' op2= unary | 'mod' op2= unary )*
            loop5:
            do {
                int alt5=4;
                switch ( input.LA(1) ) {
                case 42:
                    {
                    alt5=1;
                    }
                    break;
                case 43:
                    {
                    alt5=2;
                    }
                    break;
                case 44:
                    {
                    alt5=3;
                    }
                    break;

                }

                switch (alt5) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:165:5: '*' op2= unary
            	    {
            	    match(input,42,FOLLOW_42_in_mult895); 
            	    pushFollow(FOLLOW_unary_in_mult899);
            	    op2=unary();

            	    state._fsp--;

            	     result = result * op2; 

            	    }
            	    break;
            	case 2 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:166:5: '/' op2= unary
            	    {
            	    match(input,43,FOLLOW_43_in_mult907); 
            	    pushFollow(FOLLOW_unary_in_mult911);
            	    op2=unary();

            	    state._fsp--;

            	     result = result / op2; 

            	    }
            	    break;
            	case 3 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:167:5: 'mod' op2= unary
            	    {
            	    match(input,44,FOLLOW_44_in_mult919); 
            	    pushFollow(FOLLOW_unary_in_mult923);
            	    op2=unary();

            	    state._fsp--;

            	     result = result % op2; 

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "mult"


    // $ANTLR start "expression"
    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:171:1: expression returns [double result] : op1= mult ( '+' op2= mult | '-' op2= mult )* ;
    public final double expression() throws RecognitionException, CalculateFormulaException {
        double result = 0.0;

        double op1 = 0.0;

        double op2 = 0.0;


        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:172:2: (op1= mult ( '+' op2= mult | '-' op2= mult )* )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:172:4: op1= mult ( '+' op2= mult | '-' op2= mult )*
            {
            pushFollow(FOLLOW_mult_in_expression948);
            op1=mult();

            state._fsp--;

             result = op1; 
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:173:3: ( '+' op2= mult | '-' op2= mult )*
            loop6:
            do {
                int alt6=3;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==40) ) {
                    alt6=1;
                }
                else if ( (LA6_0==41) ) {
                    alt6=2;
                }


                switch (alt6) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:173:5: '+' op2= mult
            	    {
            	    match(input,40,FOLLOW_40_in_expression956); 
            	    pushFollow(FOLLOW_mult_in_expression960);
            	    op2=mult();

            	    state._fsp--;

            	     result = result + op2; 

            	    }
            	    break;
            	case 2 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:174:5: '-' op2= mult
            	    {
            	    match(input,41,FOLLOW_41_in_expression968); 
            	    pushFollow(FOLLOW_mult_in_expression972);
            	    op2=mult();

            	    state._fsp--;

            	     result = result - op2; 

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return result;
    }
    // $ANTLR end "expression"

    // Delegated rules


 

    public static final BitSet FOLLOW_expression_in_evaluator42 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_evaluator44 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term62 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_term69 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_term71 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_term73 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_term80 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_term87 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_javaMathFunctions_in_function103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ownFunctions_in_function111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doNotDisplay_in_ownFunctions127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_doNotDisplay144 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_doNotDisplay146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqrt_in_javaMathFunctions163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pow_in_javaMathFunctions170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_log2_in_javaMathFunctions178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abs_in_javaMathFunctions185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_acos_in_javaMathFunctions192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asin_in_javaMathFunctions199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atan_in_javaMathFunctions206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atan2_in_javaMathFunctions213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ceil_in_javaMathFunctions220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cos_in_javaMathFunctions227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exp_in_javaMathFunctions234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_floor_in_javaMathFunctions241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ieeeremainder_in_javaMathFunctions248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_max_in_javaMathFunctions255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_min_in_javaMathFunctions262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_random_in_javaMathFunctions269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rint_in_javaMathFunctions276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sin_in_javaMathFunctions283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tan_in_javaMathFunctions290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_toDegrees_in_javaMathFunctions297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_toRadians_in_javaMathFunctions304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_e_in_javaMathFunctions311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pi_in_javaMathFunctions318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_pi336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_e354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_toRadians371 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_toRadians373 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_toRadians375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_toDegrees392 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_toDegrees394 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_toDegrees396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_tan413 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_tan415 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_tan417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_sin434 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_sin436 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_sin438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_rint455 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_rint457 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_rint459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_random477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_min495 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_min499 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_min501 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_min505 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_min507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_max524 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_max528 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_max530 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_max534 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_max536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_ieeeremainder553 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_ieeeremainder557 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ieeeremainder559 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_ieeeremainder563 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_ieeeremainder565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_floor583 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_floor585 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_floor587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_exp604 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_exp606 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_exp608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_cos627 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_cos629 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_cos631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_ceil649 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_ceil651 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_ceil653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_atan2671 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_atan2675 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_atan2677 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_atan2681 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_atan2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_atan701 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_atan703 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_atan705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_asin724 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_asin726 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_asin728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_acos745 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_acos747 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_acos749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_abs766 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_abs768 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_abs770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_log2787 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_log2789 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_log2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_pow806 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_pow808 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_pow810 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_DOUBLE_in_pow812 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_pow815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_sqrt831 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_expression_in_sqrt833 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_sqrt835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_unary856 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_41_in_unary860 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_term_in_unary866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_in_mult887 = new BitSet(new long[]{0x00001C0000000002L});
    public static final BitSet FOLLOW_42_in_mult895 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_unary_in_mult899 = new BitSet(new long[]{0x00001C0000000002L});
    public static final BitSet FOLLOW_43_in_mult907 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_unary_in_mult911 = new BitSet(new long[]{0x00001C0000000002L});
    public static final BitSet FOLLOW_44_in_mult919 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_unary_in_mult923 = new BitSet(new long[]{0x00001C0000000002L});
    public static final BitSet FOLLOW_mult_in_expression948 = new BitSet(new long[]{0x0000030000000002L});
    public static final BitSet FOLLOW_40_in_expression956 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_mult_in_expression960 = new BitSet(new long[]{0x0000030000000002L});
    public static final BitSet FOLLOW_41_in_expression968 = new BitSet(new long[]{0x000003FFFDFFA030L});
    public static final BitSet FOLLOW_mult_in_expression972 = new BitSet(new long[]{0x0000030000000002L});

    /* (non-Javadoc)
    * @see org.antlr.runtime.BaseRecognizer#displayRecognitionError(java.lang.String[], org.antlr.runtime.RecognitionException)
    */
   @Override
   public void displayRecognitionError(String[] tokenNames,
     RecognitionException e) {
     //This Method is called if you have error which could be recoverd.
     //This Method stores all the error messages at the error-List
     //At the Method evaluate, there will be decided if a nestedParserAutoRecoveryException should be thrown
      String hdr = ErrorMessageProcessing.getErrorHeader(e);
           String msg = ErrorMessageProcessing.getErrorMessage(e, tokenNames, this);
           String shortMessage = hdr + " " + msg;
           ErrorList.getInstance().addException(new AntlrException(e,shortMessage, tokenNames));
   }

}