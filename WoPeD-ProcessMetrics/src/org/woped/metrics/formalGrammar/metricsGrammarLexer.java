/**
 * This Class is generated by ANTLR based on the "metricsGrammar.g" Grammar-File
 * It is the Lexer for the Grammar
 * @author <a href="mailto:tobias.lorentz@landau.dlrg-jugend.de">Tobias Lorentz</a>
 */

  package org.woped.metrics.formalGrammar;


import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.DFA;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.Lexer;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.woped.metrics.exceptions.AntlrException;

public class metricsGrammarLexer extends Lexer {
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int LETTER=9;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int EOF=-1;
    public static final int T__19=19;
    public static final int MULTILINE_COMMENT=6;
    public static final int STRING_LITERAL=7;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int DOUBLE=5;
    public static final int IDENT=4;
    public static final int DIGIT=10;
    public static final int COMMENT=12;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__44=44;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__33=33;
    public static final int WS=11;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int CHAR_LITERAL=8;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;

    // delegates
    // delegators

    public metricsGrammarLexer() {;} 
    public metricsGrammarLexer(CharStream input) {
        this(input, new RecognizerSharedState());
    }
    public metricsGrammarLexer(CharStream input, RecognizerSharedState state) {
        super(input,state);

    }
    public String getGrammarFileName() { return "/home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g"; }

    // $ANTLR start "T__13"
    public final void mT__13() throws RecognitionException {
        try {
            int _type = T__13;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:11:7: ( '(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:11:9: '('
            {
            match('('); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__13"

    // $ANTLR start "T__14"
    public final void mT__14() throws RecognitionException {
        try {
            int _type = T__14;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:12:7: ( ')' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:12:9: ')'
            {
            match(')'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__14"

    // $ANTLR start "T__15"
    public final void mT__15() throws RecognitionException {
        try {
            int _type = T__15;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:13:7: ( '$' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:13:9: '$'
            {
            match('$'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__15"

    // $ANTLR start "T__16"
    public final void mT__16() throws RecognitionException {
        try {
            int _type = T__16;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:14:7: ( 'PI' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:14:9: 'PI'
            {
            match("PI"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__16"

    // $ANTLR start "T__17"
    public final void mT__17() throws RecognitionException {
        try {
            int _type = T__17;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:15:7: ( 'E' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:15:9: 'E'
            {
            match('E'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__17"

    // $ANTLR start "T__18"
    public final void mT__18() throws RecognitionException {
        try {
            int _type = T__18;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:16:7: ( 'toRadians(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:16:9: 'toRadians('
            {
            match("toRadians("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__18"

    // $ANTLR start "T__19"
    public final void mT__19() throws RecognitionException {
        try {
            int _type = T__19;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:17:7: ( 'toDegrees(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:17:9: 'toDegrees('
            {
            match("toDegrees("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__19"

    // $ANTLR start "T__20"
    public final void mT__20() throws RecognitionException {
        try {
            int _type = T__20;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:18:7: ( 'tan(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:18:9: 'tan('
            {
            match("tan("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__20"

    // $ANTLR start "T__21"
    public final void mT__21() throws RecognitionException {
        try {
            int _type = T__21;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:19:7: ( 'sin(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:19:9: 'sin('
            {
            match("sin("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__21"

    // $ANTLR start "T__22"
    public final void mT__22() throws RecognitionException {
        try {
            int _type = T__22;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:20:7: ( 'rint(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:20:9: 'rint('
            {
            match("rint("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__22"

    // $ANTLR start "T__23"
    public final void mT__23() throws RecognitionException {
        try {
            int _type = T__23;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:21:7: ( 'random()' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:21:9: 'random()'
            {
            match("random()"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__23"

    // $ANTLR start "T__24"
    public final void mT__24() throws RecognitionException {
        try {
            int _type = T__24;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:22:7: ( 'min(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:22:9: 'min('
            {
            match("min("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__24"

    // $ANTLR start "T__25"
    public final void mT__25() throws RecognitionException {
        try {
            int _type = T__25;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:23:7: ( ',' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:23:9: ','
            {
            match(','); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__25"

    // $ANTLR start "T__26"
    public final void mT__26() throws RecognitionException {
        try {
            int _type = T__26;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:24:7: ( 'max(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:24:9: 'max('
            {
            match("max("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__26"

    // $ANTLR start "T__27"
    public final void mT__27() throws RecognitionException {
        try {
            int _type = T__27;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:25:7: ( 'IEEEremainder(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:25:9: 'IEEEremainder('
            {
            match("IEEEremainder("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__27"

    // $ANTLR start "T__28"
    public final void mT__28() throws RecognitionException {
        try {
            int _type = T__28;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:26:7: ( 'floor(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:26:9: 'floor('
            {
            match("floor("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__28"

    // $ANTLR start "T__29"
    public final void mT__29() throws RecognitionException {
        try {
            int _type = T__29;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:27:7: ( 'exp(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:27:9: 'exp('
            {
            match("exp("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__29"

    // $ANTLR start "T__30"
    public final void mT__30() throws RecognitionException {
        try {
            int _type = T__30;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:28:7: ( 'cos(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:28:9: 'cos('
            {
            match("cos("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__30"

    // $ANTLR start "T__31"
    public final void mT__31() throws RecognitionException {
        try {
            int _type = T__31;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:29:7: ( 'ceil(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:29:9: 'ceil('
            {
            match("ceil("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__31"

    // $ANTLR start "T__32"
    public final void mT__32() throws RecognitionException {
        try {
            int _type = T__32;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:30:7: ( 'atan2(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:30:9: 'atan2('
            {
            match("atan2("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__32"

    // $ANTLR start "T__33"
    public final void mT__33() throws RecognitionException {
        try {
            int _type = T__33;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:31:7: ( 'atan(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:31:9: 'atan('
            {
            match("atan("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__33"

    // $ANTLR start "T__34"
    public final void mT__34() throws RecognitionException {
        try {
            int _type = T__34;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:32:7: ( 'asin(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:32:9: 'asin('
            {
            match("asin("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__34"

    // $ANTLR start "T__35"
    public final void mT__35() throws RecognitionException {
        try {
            int _type = T__35;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:33:7: ( 'acos(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:33:9: 'acos('
            {
            match("acos("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__35"

    // $ANTLR start "T__36"
    public final void mT__36() throws RecognitionException {
        try {
            int _type = T__36;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:34:7: ( 'abs(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:34:9: 'abs('
            {
            match("abs("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__36"

    // $ANTLR start "T__37"
    public final void mT__37() throws RecognitionException {
        try {
            int _type = T__37;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:35:7: ( 'log2(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:35:9: 'log2('
            {
            match("log2("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__37"

    // $ANTLR start "T__38"
    public final void mT__38() throws RecognitionException {
        try {
            int _type = T__38;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:36:7: ( 'pow(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:36:9: 'pow('
            {
            match("pow("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__38"

    // $ANTLR start "T__39"
    public final void mT__39() throws RecognitionException {
        try {
            int _type = T__39;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:37:7: ( 'sqrt(' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:37:9: 'sqrt('
            {
            match("sqrt("); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__39"

    // $ANTLR start "T__40"
    public final void mT__40() throws RecognitionException {
        try {
            int _type = T__40;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:38:7: ( '+' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:38:9: '+'
            {
            match('+'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__40"

    // $ANTLR start "T__41"
    public final void mT__41() throws RecognitionException {
        try {
            int _type = T__41;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:39:7: ( '-' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:39:9: '-'
            {
            match('-'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__41"

    // $ANTLR start "T__42"
    public final void mT__42() throws RecognitionException {
        try {
            int _type = T__42;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:40:7: ( '*' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:40:9: '*'
            {
            match('*'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__42"

    // $ANTLR start "T__43"
    public final void mT__43() throws RecognitionException {
        try {
            int _type = T__43;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:41:7: ( '/' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:41:9: '/'
            {
            match('/'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__43"

    // $ANTLR start "T__44"
    public final void mT__44() throws RecognitionException {
        try {
            int _type = T__44;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:42:7: ( 'mod' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:42:9: 'mod'
            {
            match("mod"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__44"

    // $ANTLR start "MULTILINE_COMMENT"
    public final void mMULTILINE_COMMENT() throws RecognitionException {
        try {
            int _type = MULTILINE_COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:179:19: ( '/*' ( . )* '*/' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:179:21: '/*' ( . )* '*/'
            {
            match("/*"); 

            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:179:26: ( . )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0=='*') ) {
                    int LA1_1 = input.LA(2);

                    if ( (LA1_1=='/') ) {
                        alt1=2;
                    }
                    else if ( ((LA1_1>='\u0000' && LA1_1<='.')||(LA1_1>='0' && LA1_1<='\uFFFF')) ) {
                        alt1=1;
                    }


                }
                else if ( ((LA1_0>='\u0000' && LA1_0<=')')||(LA1_0>='+' && LA1_0<='\uFFFF')) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:179:26: .
            	    {
            	    matchAny(); 

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            match("*/"); 

            _channel = HIDDEN;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MULTILINE_COMMENT"

    // $ANTLR start "STRING_LITERAL"
    public final void mSTRING_LITERAL() throws RecognitionException {
        try {
            int _type = STRING_LITERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            int c;

            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:182:2: ( '\"' ( '\"' '\"' | c=~ ( '\"' | '\\r' | '\\n' ) )* '\"' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:182:4: '\"' ( '\"' '\"' | c=~ ( '\"' | '\\r' | '\\n' ) )* '\"'
            {
            match('\"'); 
             StringBuilder b = new StringBuilder(); 
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:184:3: ( '\"' '\"' | c=~ ( '\"' | '\\r' | '\\n' ) )*
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);

                if ( (LA2_0=='\"') ) {
                    int LA2_1 = input.LA(2);

                    if ( (LA2_1=='\"') ) {
                        alt2=1;
                    }


                }
                else if ( ((LA2_0>='\u0000' && LA2_0<='\t')||(LA2_0>='\u000B' && LA2_0<='\f')||(LA2_0>='\u000E' && LA2_0<='!')||(LA2_0>='#' && LA2_0<='\uFFFF')) ) {
                    alt2=2;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:184:5: '\"' '\"'
            	    {
            	    match('\"'); 
            	    match('\"'); 
            	     b.appendCodePoint('"');

            	    }
            	    break;
            	case 2 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:185:5: c=~ ( '\"' | '\\r' | '\\n' )
            	    {
            	    c= input.LA(1);
            	    if ( (input.LA(1)>='\u0000' && input.LA(1)<='\t')||(input.LA(1)>='\u000B' && input.LA(1)<='\f')||(input.LA(1)>='\u000E' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='\uFFFF') ) {
            	        input.consume();

            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;}

            	     b.appendCodePoint(c);

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            match('\"'); 
             setText(b.toString()); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STRING_LITERAL"

    // $ANTLR start "CHAR_LITERAL"
    public final void mCHAR_LITERAL() throws RecognitionException {
        try {
            int _type = CHAR_LITERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:192:2: ( '\\'' . '\\'' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:192:4: '\\'' . '\\''
            {
            match('\''); 
            matchAny(); 
            match('\''); 
            setText(getText().substring(1,2));

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHAR_LITERAL"

    // $ANTLR start "LETTER"
    public final void mLETTER() throws RecognitionException {
        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:195:17: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:195:19: ( 'a' .. 'z' | 'A' .. 'Z' )
            {
            if ( (input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "LETTER"

    // $ANTLR start "DIGIT"
    public final void mDIGIT() throws RecognitionException {
        try {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:196:16: ( '0' .. '9' )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:196:18: '0' .. '9'
            {
            matchRange('0','9'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "DIGIT"

    // $ANTLR start "DOUBLE"
    public final void mDOUBLE() throws RecognitionException {
        try {
            int _type = DOUBLE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:8: ( ( '-' )? ( DIGIT )+ ( '.' ( DIGIT )+ )? )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:10: ( '-' )? ( DIGIT )+ ( '.' ( DIGIT )+ )?
            {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:10: ( '-' )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0=='-') ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:11: '-'
                    {
                    match('-'); 

                    }
                    break;

            }

            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:17: ( DIGIT )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( ((LA4_0>='0' && LA4_0<='9')) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:18: DIGIT
            	    {
            	    mDIGIT(); 

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:26: ( '.' ( DIGIT )+ )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0=='.') ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:27: '.' ( DIGIT )+
                    {
                    match('.'); 
                    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:31: ( DIGIT )+
                    int cnt5=0;
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( ((LA5_0>='0' && LA5_0<='9')) ) {
                            alt5=1;
                        }


                        switch (alt5) {
                    	case 1 :
                    	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:197:32: DIGIT
                    	    {
                    	    mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt5 >= 1 ) break loop5;
                                EarlyExitException eee =
                                    new EarlyExitException(5, input);
                                throw eee;
                        }
                        cnt5++;
                    } while (true);


                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "DOUBLE"

    // $ANTLR start "IDENT"
    public final void mIDENT() throws RecognitionException {
        try {
            int _type = IDENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:198:7: ( LETTER ( LETTER | DIGIT | '_' )* )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:198:9: LETTER ( LETTER | DIGIT | '_' )*
            {
            mLETTER(); 
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:198:16: ( LETTER | DIGIT | '_' )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( ((LA7_0>='0' && LA7_0<='9')||(LA7_0>='A' && LA7_0<='Z')||LA7_0=='_'||(LA7_0>='a' && LA7_0<='z')) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:
            	    {
            	    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
            	        input.consume();

            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;}


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "IDENT"

    // $ANTLR start "WS"
    public final void mWS() throws RecognitionException {
        try {
            int _type = WS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:199:4: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+ )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:199:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
            {
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:199:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
            int cnt8=0;
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( ((LA8_0>='\t' && LA8_0<='\n')||(LA8_0>='\f' && LA8_0<='\r')||LA8_0==' ') ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:
            	    {
            	    if ( (input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ' ) {
            	        input.consume();

            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        throw eee;
                }
                cnt8++;
            } while (true);

            _channel = HIDDEN;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WS"

    // $ANTLR start "COMMENT"
    public final void mCOMMENT() throws RecognitionException {
        try {
            int _type = COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:200:9: ( '//' ( . )* ( '\\n' | '\\r' ) )
            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:200:11: '//' ( . )* ( '\\n' | '\\r' )
            {
            match("//"); 

            // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:200:16: ( . )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0=='\n'||LA9_0=='\r') ) {
                    alt9=2;
                }
                else if ( ((LA9_0>='\u0000' && LA9_0<='\t')||(LA9_0>='\u000B' && LA9_0<='\f')||(LA9_0>='\u000E' && LA9_0<='\uFFFF')) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:200:16: .
            	    {
            	    matchAny(); 

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            if ( input.LA(1)=='\n'||input.LA(1)=='\r' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}

            _channel = HIDDEN;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COMMENT"

    public void mTokens() throws RecognitionException {
        // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:8: ( T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | MULTILINE_COMMENT | STRING_LITERAL | CHAR_LITERAL | DOUBLE | IDENT | WS | COMMENT )
        int alt10=39;
        alt10 = dfa10.predict(input);
        switch (alt10) {
            case 1 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:10: T__13
                {
                mT__13(); 

                }
                break;
            case 2 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:16: T__14
                {
                mT__14(); 

                }
                break;
            case 3 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:22: T__15
                {
                mT__15(); 

                }
                break;
            case 4 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:28: T__16
                {
                mT__16(); 

                }
                break;
            case 5 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:34: T__17
                {
                mT__17(); 

                }
                break;
            case 6 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:40: T__18
                {
                mT__18(); 

                }
                break;
            case 7 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:46: T__19
                {
                mT__19(); 

                }
                break;
            case 8 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:52: T__20
                {
                mT__20(); 

                }
                break;
            case 9 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:58: T__21
                {
                mT__21(); 

                }
                break;
            case 10 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:64: T__22
                {
                mT__22(); 

                }
                break;
            case 11 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:70: T__23
                {
                mT__23(); 

                }
                break;
            case 12 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:76: T__24
                {
                mT__24(); 

                }
                break;
            case 13 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:82: T__25
                {
                mT__25(); 

                }
                break;
            case 14 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:88: T__26
                {
                mT__26(); 

                }
                break;
            case 15 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:94: T__27
                {
                mT__27(); 

                }
                break;
            case 16 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:100: T__28
                {
                mT__28(); 

                }
                break;
            case 17 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:106: T__29
                {
                mT__29(); 

                }
                break;
            case 18 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:112: T__30
                {
                mT__30(); 

                }
                break;
            case 19 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:118: T__31
                {
                mT__31(); 

                }
                break;
            case 20 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:124: T__32
                {
                mT__32(); 

                }
                break;
            case 21 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:130: T__33
                {
                mT__33(); 

                }
                break;
            case 22 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:136: T__34
                {
                mT__34(); 

                }
                break;
            case 23 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:142: T__35
                {
                mT__35(); 

                }
                break;
            case 24 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:148: T__36
                {
                mT__36(); 

                }
                break;
            case 25 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:154: T__37
                {
                mT__37(); 

                }
                break;
            case 26 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:160: T__38
                {
                mT__38(); 

                }
                break;
            case 27 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:166: T__39
                {
                mT__39(); 

                }
                break;
            case 28 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:172: T__40
                {
                mT__40(); 

                }
                break;
            case 29 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:178: T__41
                {
                mT__41(); 

                }
                break;
            case 30 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:184: T__42
                {
                mT__42(); 

                }
                break;
            case 31 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:190: T__43
                {
                mT__43(); 

                }
                break;
            case 32 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:196: T__44
                {
                mT__44(); 

                }
                break;
            case 33 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:202: MULTILINE_COMMENT
                {
                mMULTILINE_COMMENT(); 

                }
                break;
            case 34 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:220: STRING_LITERAL
                {
                mSTRING_LITERAL(); 

                }
                break;
            case 35 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:235: CHAR_LITERAL
                {
                mCHAR_LITERAL(); 

                }
                break;
            case 36 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:248: DOUBLE
                {
                mDOUBLE(); 

                }
                break;
            case 37 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:255: IDENT
                {
                mIDENT(); 

                }
                break;
            case 38 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:261: WS
                {
                mWS(); 

                }
                break;
            case 39 :
                // /home/tobias/workspace/Woped/src/antlrGrammar/metricsGrammar.g:1:264: COMMENT
                {
                mCOMMENT(); 

                }
                break;

        }

    }


    protected DFA10 dfa10 = new DFA10(this);
    static final String DFA10_eotS =
        "\4\uffff\1\31\1\34\4\31\1\uffff\7\31\1\uffff\1\61\1\uffff\1\64\5"+
        "\uffff\1\65\1\uffff\24\31\5\uffff\11\31\1\124\15\31\2\uffff\3\31"+
        "\3\uffff\2\31\2\uffff\4\31\1\uffff\1\31\1\uffff\2\31\2\uffff\3\31"+
        "\1\uffff\1\31\4\uffff\4\31\2\uffff\2\31\1\uffff\7\31\2\uffff\4\31"+
        "\1\uffff";
    static final String DFA10_eofS =
        "\u0084\uffff";
    static final String DFA10_minS =
        "\1\11\3\uffff\1\111\1\60\1\141\1\151\2\141\1\uffff\1\105\1\154\1"+
        "\170\1\145\1\142\2\157\1\uffff\1\60\1\uffff\1\52\5\uffff\1\60\1"+
        "\uffff\1\104\2\156\1\162\3\156\1\170\1\144\1\105\1\157\1\160\1\163"+
        "\1\151\1\141\1\151\1\157\1\163\1\147\1\167\5\uffff\1\141\1\145\2"+
        "\50\2\164\1\144\2\50\1\60\1\105\1\157\2\50\1\154\2\156\1\163\1\50"+
        "\1\62\1\50\1\144\1\147\2\uffff\2\50\1\157\3\uffff\2\162\2\uffff"+
        "\4\50\1\uffff\1\50\1\uffff\1\151\1\162\2\uffff\1\155\1\145\1\50"+
        "\1\uffff\1\50\4\uffff\1\141\1\145\1\50\1\155\2\uffff\1\156\1\145"+
        "\1\uffff\1\141\2\163\1\151\2\50\1\156\2\uffff\1\144\1\145\1\162"+
        "\1\50\1\uffff";
    static final String DFA10_maxS =
        "\1\172\3\uffff\1\111\1\172\1\157\1\161\1\151\1\157\1\uffff\1\105"+
        "\1\154\1\170\1\157\1\164\2\157\1\uffff\1\71\1\uffff\1\57\5\uffff"+
        "\1\172\1\uffff\1\122\2\156\1\162\3\156\1\170\1\144\1\105\1\157\1"+
        "\160\1\163\1\151\1\141\1\151\1\157\1\163\1\147\1\167\5\uffff\1\141"+
        "\1\145\2\50\2\164\1\144\2\50\1\172\1\105\1\157\2\50\1\154\2\156"+
        "\1\163\1\50\1\62\1\50\1\144\1\147\2\uffff\2\50\1\157\3\uffff\2\162"+
        "\2\uffff\1\50\1\62\2\50\1\uffff\1\50\1\uffff\1\151\1\162\2\uffff"+
        "\1\155\1\145\1\50\1\uffff\1\50\4\uffff\1\141\1\145\1\50\1\155\2"+
        "\uffff\1\156\1\145\1\uffff\1\141\2\163\1\151\2\50\1\156\2\uffff"+
        "\1\144\1\145\1\162\1\50\1\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\1\1\2\1\3\6\uffff\1\15\7\uffff\1\34\1\uffff\1\36\1\uffff"+
        "\1\42\1\43\1\44\1\45\1\46\1\uffff\1\5\24\uffff\1\35\1\41\1\47\1"+
        "\37\1\4\27\uffff\1\10\1\11\3\uffff\1\14\1\16\1\40\2\uffff\1\21\1"+
        "\22\4\uffff\1\30\1\uffff\1\32\2\uffff\1\33\1\12\3\uffff\1\23\1\uffff"+
        "\1\25\1\26\1\27\1\31\4\uffff\1\20\1\24\2\uffff\1\13\7\uffff\1\6"+
        "\1\7\4\uffff\1\17";
    static final String DFA10_specialS =
        "\u0084\uffff}>";
    static final String[] DFA10_transitionS = {
            "\2\32\1\uffff\2\32\22\uffff\1\32\1\uffff\1\26\1\uffff\1\3\2"+
            "\uffff\1\27\1\1\1\2\1\24\1\22\1\12\1\23\1\uffff\1\25\12\30\7"+
            "\uffff\4\31\1\5\3\31\1\13\6\31\1\4\12\31\6\uffff\1\17\1\31\1"+
            "\16\1\31\1\15\1\14\5\31\1\20\1\11\2\31\1\21\1\31\1\10\1\7\1"+
            "\6\6\31",
            "",
            "",
            "",
            "\1\33",
            "\12\31\7\uffff\32\31\4\uffff\1\31\1\uffff\32\31",
            "\1\36\15\uffff\1\35",
            "\1\37\7\uffff\1\40",
            "\1\42\7\uffff\1\41",
            "\1\44\7\uffff\1\43\5\uffff\1\45",
            "",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\52\11\uffff\1\51",
            "\1\56\1\55\17\uffff\1\54\1\53",
            "\1\57",
            "\1\60",
            "",
            "\12\30",
            "",
            "\1\62\4\uffff\1\63",
            "",
            "",
            "",
            "",
            "",
            "\12\31\7\uffff\32\31\4\uffff\1\31\1\uffff\32\31",
            "",
            "\1\67\15\uffff\1\66",
            "\1\70",
            "\1\71",
            "\1\72",
            "\1\73",
            "\1\74",
            "\1\75",
            "\1\76",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\1\103",
            "\1\104",
            "\1\105",
            "\1\106",
            "\1\107",
            "\1\110",
            "\1\111",
            "\1\112",
            "",
            "",
            "",
            "",
            "",
            "\1\113",
            "\1\114",
            "\1\115",
            "\1\116",
            "\1\117",
            "\1\120",
            "\1\121",
            "\1\122",
            "\1\123",
            "\12\31\7\uffff\32\31\4\uffff\1\31\1\uffff\32\31",
            "\1\125",
            "\1\126",
            "\1\127",
            "\1\130",
            "\1\131",
            "\1\132",
            "\1\133",
            "\1\134",
            "\1\135",
            "\1\136",
            "\1\137",
            "\1\140",
            "\1\141",
            "",
            "",
            "\1\142",
            "\1\143",
            "\1\144",
            "",
            "",
            "",
            "\1\145",
            "\1\146",
            "",
            "",
            "\1\147",
            "\1\151\11\uffff\1\150",
            "\1\152",
            "\1\153",
            "",
            "\1\154",
            "",
            "\1\155",
            "\1\156",
            "",
            "",
            "\1\157",
            "\1\160",
            "\1\161",
            "",
            "\1\162",
            "",
            "",
            "",
            "",
            "\1\163",
            "\1\164",
            "\1\165",
            "\1\166",
            "",
            "",
            "\1\167",
            "\1\170",
            "",
            "\1\171",
            "\1\172",
            "\1\173",
            "\1\174",
            "\1\175",
            "\1\176",
            "\1\177",
            "",
            "",
            "\1\u0080",
            "\1\u0081",
            "\1\u0082",
            "\1\u0083",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "1:1: Tokens : ( T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | MULTILINE_COMMENT | STRING_LITERAL | CHAR_LITERAL | DOUBLE | IDENT | WS | COMMENT );";
        }
    }
    
    @Override
    public void displayRecognitionError(String[] tokenNames,
      RecognitionException e) {
     String hdr = ErrorMessageProcessing.getErrorHeader(e);
           String msg = ErrorMessageProcessing.getErrorMessage(e, tokenNames, this);
           String shortMessage = hdr + " " + msg;
           ErrorList.getInstance().addException(new AntlrException(e,shortMessage, tokenNames));
    }
 

}