package WorldModelToPetrinet;

import TextToWorldModel.transform.DummyAction;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class PetriNet {

    public enum REFERENCE_DIRECTION {ingoing,outgoing,all};

    private ArrayList<Arc> arcList= new ArrayList<Arc>();
    private ArrayList<Place> placeList= new ArrayList<Place>();
    private ArrayList<Transition> transitionList= new ArrayList<Transition>();
    private PetrinetElementBuilder elementBuilder;

    public PetriNet(){
       /* Transition.resetStaticContext();
        Arc.resetStaticContext();
        Place.resetStaticContext();*/
        //DummyAction.resetStaticContext();
        elementBuilder= new PetrinetElementBuilder();
    }

    public PetrinetElementBuilder getElementBuilder() {
        return elementBuilder;
    }

    public void add(Place p){
        placeList.add(p);

    }

    public void add(Arc a){
        arcList.add(a);
    }

    public void add(Transition t){
        transitionList.add(t);
    }

    public ArrayList<Arc> getArcList() {
        return arcList;
    }

    public ArrayList<Place> getPlaceList() {
        return placeList;
    }

    public ArrayList<Transition> getTransitionList() {
        return transitionList;
    }

    private Place getPlaceById(String id){

        Iterator<Place> i = placeList.iterator();
        while (i.hasNext()){
            Place p = i.next();
            if(p.getID().equals(id)){
                return p;
            }
        }
        //not found
        return null;
    }

    public List<Place> getAllSinks(){
        ArrayList<Place> sourcePlaces = new ArrayList<Place>();
        Iterator<Arc> i = arcList.iterator();
        while(i.hasNext()){
            Arc a = i.next();
            String elementID= a.getSource();
            if(elementID.startsWith("p")){
                //Place
                sourcePlaces.add(getPlaceById(elementID));
            }
        }
        ArrayList<Place> sinks = new ArrayList<Place>();
        Iterator<Place> i2 = placeList.iterator();
        while(i2.hasNext()){
            Place p = i2.next();
            boolean found=false;
            Iterator<Place> i3 = sourcePlaces.iterator();
            while(i3.hasNext()){
                Place p2 = i3.next();
                if(p.getID().equals(p2.getID())){
                    found=true;
                }
            }
            if(!found){
                sinks.add(p);
            }

        }
        return sinks;
    }

    public List<Place> getAllSources(){
        ArrayList<Place> targetPlaces = new ArrayList<Place>();
        Iterator<Arc> i = arcList.iterator();
        while(i.hasNext()){
            Arc a = i.next();
            String elementID= a.getTarget();
            if(elementID.startsWith("p")){
                //Place
                targetPlaces.add(getPlaceById(elementID));
            }
        }
        ArrayList<Place> sources = new ArrayList<Place>();
        Iterator<Place> i2 = placeList.iterator();
        while(i2.hasNext()){
            Place p = i2.next();
            boolean found=false;
            Iterator<Place> i3 = targetPlaces.iterator();
            while(i3.hasNext()){
                Place p2 = i3.next();
                if(p.getID().equals(p2.getID())){
                    found=true;
                }
            }
            if(!found){
                sources.add(p);
            }

        }
        return sources;
    }


    public String getPNML(){
        String PNML= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<!--PLEASE DO NOT EDIT THIS FILE\n" +
                "Created with Workflow PetriNet Designer Version 3.2.0 (woped.org)-->\n" +
                "<pnml xmlns=\"pnml.woped.org\">\n" +
                "  <net type=\"http://www.informatik.hu-berlin.de/top/pntd/ptNetb\" id=\"noID\">";

        Iterator<Place> i = placeList.iterator();
        while(i.hasNext()){
            Place p = i.next();
            PNML=PNML+p.toString()+"\n";
        }

        Iterator<Transition> i2 = transitionList.iterator();
        while(i2.hasNext()){
            Transition t = i2.next();
            PNML=PNML+t.toString()+"\n";
        }

        Iterator<Arc> i3 = arcList.iterator();
        while(i3.hasNext()){
            Arc a = i3.next();
            PNML=PNML+a.toString()+"\n";
        }

        PNML=PNML+
                "  </net>\n" +
                "</pnml>";
        return PNML;
    }

    public void unifySources(List<Place> sources){
        Iterator<Place> i = sources.iterator();
        Transition t = elementBuilder.createTransition("startprocess",false,false,"");
        Place source = elementBuilder.createPlace(false,"");
        source.setText("start");
        source.setHasMarking(true);
        Arc a1= elementBuilder.createArc(source.getID(),t.getID(),"");
        while(i.hasNext()){
            Place p = i.next();
            Arc a = elementBuilder.createArc(t.getID(),p.getID(),"");
            placeList.add(p);
            arcList.add(a);
        }
        transitionList.add(t);
        placeList.add(source);
        arcList.add(a1);
    }

    public void unifySinks(List<Place> sinks){
        Iterator<Place> i = sinks.iterator();
        Place sink = elementBuilder.createPlace(false,"");
        placeList.add(sink);
        sink.setText("end");
        XORJoin xj= new XORJoin(sinks.size(),"",elementBuilder);
        xj.addXORJoinToPetriNet(this,sinks,sink);
    }

    public PetriNetElement getPetrinetElementByID(String ID){
        ArrayList<ArrayList<? extends PetriNetElement>> elementLists = new  ArrayList<ArrayList<? extends PetriNetElement>> ();
        elementLists.add(arcList);
        elementLists.add(placeList);
        elementLists.add(transitionList);
        Iterator<ArrayList<? extends PetriNetElement>> i = elementLists.iterator();
        while(i.hasNext()){
            ArrayList<? extends PetriNetElement> elementList = i.next();
            Iterator<? extends PetriNetElement> j = elementList.iterator();
            while(j.hasNext()){
                PetriNetElement element= j.next();
                if(element.getID().equals(ID)){
                    return element;
                }
            }
        }
        //if nothing is found
        return null;
    }

    public boolean removePetrinetElementByID(String ID){
        ArrayList<ArrayList<? extends PetriNetElement>> elementLists = new  ArrayList<ArrayList<? extends PetriNetElement>> ();
        elementLists.add(arcList);
        elementLists.add(placeList);
        elementLists.add(transitionList);
        Iterator<ArrayList<? extends PetriNetElement>> i = elementLists.iterator();
        while(i.hasNext()){
            ArrayList<? extends PetriNetElement> elementList = i.next();
            Iterator<? extends PetriNetElement> j = elementList.iterator();
            while(j.hasNext()){
                PetriNetElement element= j.next();
                if(element.getID().equals(ID)){
                    j.remove();
                    return true;
                }
            }
        }
        //if nothing is found
        return false;
    }

    public List<Arc> getAllReferencingArcsForElement(String ID, REFERENCE_DIRECTION directionRestriction ){
    PetriNetElement element = getPetrinetElementByID(ID);
    ArrayList<Arc> referencingArcs = new ArrayList<Arc>();
    if(element!=null){
        Iterator<Arc> i = arcList.iterator();
        while(i.hasNext()){
            Arc a= i.next();
            switch (directionRestriction) {
                case ingoing:
                    if(a.getTarget().equals(element.getID()))
                        referencingArcs.add(a);
                    break;
                case outgoing:
                    if(a.getSource().equals(element.getID()))
                        referencingArcs.add(a);
                    break;
                default:
                    if(a.getSource().equals(element.getID())||a.getTarget().equals(element.getID()))
                        referencingArcs.add(a);
            }
        }
    }
    return referencingArcs;
    }


}
